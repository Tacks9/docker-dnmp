version: "3"
services: 
  # 服务名称
  php:
    # 镜像名字
    image: dnmp-php:${PHP_VERSION}
    # 容器名称
    container_name: dnmp-php
    # 指定构建的 Dockerfile 文件
    build:
      context: ./services/php74
      # 设置构建参数
      args:
        TZ: ${TZ}
        CONTAINER_PHP_PACKAGE_URL: ${CONTAINER_PHP_PACKAGE_URL}
        PHP_VERSION: ${PHP_VERSION}
        PHP_WORK_DIR: ${PHP_WORK_DIR}
        PHP_EXTENSIONS: ${PHP_EXTENSIONS}
    # 设置环境变量
    environment:                        
      - TZ=${TZ}
    # 对外暴露端口
    expose:
      - 9501
    extra_hosts:
      - "www.site.com:127.0.0.1"
    # 端口映射
    ports:
      - "9501:9501"
      - "9502:9502"
    # 将宿主机的目录挂载到容器中
    volumes:
      - ${PHP_CONF_INI_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP_CONF_FPM_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
      - ${PHP_SOURCE_DIR}:${PHP_WORK_DIR}:rw
      - ${PHP_LOG_DIR}:/var/log/php
    # 指定容器退出后的重启策略为始终重启
    restart: always
    cap_add:
      - SYS_PTRACE
    networks:
      - docker-dnmp-default

  # 服务名称
  nginx:
    # 镜像名称
    image: dnmp-nginx:${NGINX_VERSION}
    # 容器名称
    container_name: dnmp-nginx
    # 指定 Dockerfile
    build:
      context: ./services/nginx
      args:
        TZ: ${TZ}
        CONTAINER_NGINX_PACKAGE_URL: ${CONTAINER_NGINX_PACKAGE_URL}
        NGINX_VERSION: ${NGINX_VERSION}
    # 设置环境变量
    environment:                        
      - TZ=${TZ}
    # 端口映射
    ports:
      - "${NGINX_HTTP_HOST_PORT}:80"
      - "${NGINX_HTTPS_HOST_PORT}:443"
    links:
      - php
    # 磁盘挂载
    volumes:
      - ${NGINX_SOURCE_DIR}:${NGINX_WORK_DIR}:rw
      - ${NGINX_CONF_NGINX_CONF}:/etc/nginx/nginx.conf:rw
      - ${NGINX_CONF_DIR_SSL}:/etc/nginx/ssl/:rw
      - ${NGINX_CONF_DIR_CONFD}:/etc/nginx/conf.d/:rw
      - ${NGINX_CONF_DIR_FASTCGI}:/etc/nginx/fastcgi/:rw
      - ${NGINX_CONF_DIR_ERROR}:/etc/nginx/error/:rw
      - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
    restart: always
    networks:
      - docker-dnmp-default

     
  # 服务名称
  mysql:
    # 镜像名称
    image: dnmp-mysql:${MYSQL_VERSION}
    # 容器名称
    container_name: dnmp-mysql
    build:
      context: ./services/mysql
      args:
        MYSQL_VERSION: ${MYSQL_VERSION}
    # 环境变量
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_ROOT_HOST: "${MYSQL_ROOT_HOST}"
      TZ: "$TZ"
    # 端口映射
    ports:
      - "${MYSQL_HOST_PORT}:3306"
    # 磁盘挂载
    volumes:
      - ${MYSQL_CONF_MYSQL_CNF}:/etc/mysql/conf.d/mysql.cnf:ro
      - ${MYSQL_CONF_DIR_DATA}:/var/lib/mysql/:rw
      - ${MYSQL_LOG_DIR}:/var/log/mysql/:rw
    restart: always
    networks:
      - docker-dnmp-default
    

  # 服务名称
  redis:
    # 镜像名称
    image: dnmp-redis:${REDIS_VERSION}
    # 容器名称
    container_name: dnmp-redis
    # 编译文件
    build:
      context: ./services/redis
      args:
        REDIS_VERSION: ${REDIS_VERSION}
    # 环境变量
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      TZ: "$TZ"
    # 端口映射
    ports:
      - "${REDIS_HOST_PORT}:6379"
    # 磁盘挂载
    volumes:
      - ${REDIS_CONF_REDIS_CONF}:/etc/redis.conf:ro
      - ${REDIS_CONF_DIR_DATA}:/data/:rw
    restart: always
    entrypoint: ["redis-server", "/etc/redis.conf" , "--requirepass" , "${REDIS_PASSWORD}"]
    restart: always
    networks:
      - docker-dnmp-default

# 网络配置
networks:
  # 定义网络名
  docker-dnmp-default:
    # bridge 驱动
    driver: bridge
    # IP 地址管理相关的配置
    ipam:
      driver: default
      config:
       - subnet: 192.168.10.0/24
